/* Compute/draw mandelbrot set using MPI/MPE commands
 * Written Winter, 1998, W. David Laverell.
 * Simplified Winter 2002, Joel Adams. 
 */

//#define USE_MPE 1
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <sys/time.h>
#include "mpi.h"
#ifdef USE_MPE
#include "mpe.h"
#include "display.h"
#endif


/* compute the mandelbrot-set function for a given
 *  point in the complex plane.
 * Receive: doubles x and y,
 *          complex c.
 * Modify: doubles ans_x and ans_y.
 * POST: ans_x and ans_y contain the results of the mandelbrot-set
 *        function for x, y, and c.
 */
void compute(double x, double y, double c_real, double c_imag,
        double *ans_x, double *ans_y)
{
        *ans_x = x*x - y*y + c_real;
        *ans_y = 2*x*y + c_imag;
}

/* compute the 'distance' between x and y.
 * Receive: doubles x and y.
 * Return: x^2 + y^2.
 */
double distance(double x, double y)
{
        return(x*x + y*y);
}

void masterProcess(int num_process)
{
	int i, num_complete;
	int remain_jobs;
	int flag, source;
	MPI_Status status;
	double tx, total= 0.0;
	for(i=1; i < num_process; i++)
		MPI_Send(&i, 1, MPI_INT, i, 199, MPI_COMM_WORLD);

	num_complete =0;
	remain_jobs = 1024;

	while(remain_jobs)
	{
		MPI_Iprobe(MPI_ANY_SOURCE, MPI_ANY_TAG, MPI_COMM_WORLD, &flag, &status);
		if(flag)
		{
			source = status.MPI_SOURCE;
	  		MPI_Recv(&tx, 1, MPI_DOUBLE, source, MPI_ANY_TAG, MPI_COMM_WORLD, &status);
			++num_complete;
			if(num_complete == num_process-1)
				remain_jobs = 0;
		
		}
	}
	for(i = 1; i<num_process; i++)
		  MPI_Send(NULL, 0, MPI_CHAR, i, 200, MPI_COMM_WORLD);
}


void slaveProcess()
{
	  int remain_Jobs=1024;
  int source=0;        // 0 means source is master process
  MPI_Status status;
  double tx =0;

  while (remain_Jobs)
    {
      MPI_Recv(NULL, 0, MPI_CHAR, source, MPI_ANY_TAG,
	       MPI_COMM_WORLD, &status);

      switch (status.MPI_TAG)
	{
	case 199:
	  MPI_Send(&tx, 1, MPI_DOUBLE, 0, 199, MPI_COMM_WORLD);
	  break;

	case 200:    // tells slave to stop waiting for messages and terminate
	  remain_Jobs=0;
	  break;
	}
    }
}

int main(int argc, char* argv[])
{
	const int  WINDOW_SIZE = 1024;
int cur_rank, total_process;
	
	MPI_Init(&argc,&argv);
	MPI_Comm_rank (MPI_COMM_WORLD, &cur_rank);
	MPI_Comm_size (MPI_COMM_WORLD, &total_process);

  	switch (cur_rank)
    	{
    		case 0:
      		masterProcess(total_process);
      		break;
    		default:
      		slaveProcess();
      		break;
    	}
    	MPI_Finalize();
    	return 0;
}

